package service

import (
	"portfolio_api/entity"
	"portfolio_api/input"
	"portfolio_api/repository"
)

type UserService interface {
	UserServiceGetAll() ([]entity.User, error)
	UserServiceGetByID(inputID input.InputIDUser) (entity.User, error)
	UserServiceCreate(input input.UserInput) (entity.User, error)
	UserServiceUpdate(inputID input.InputIDUser, inputData input.UserInput) (entity.User, error)
	UserServiceDeleteByID(inputID input.InputIDUser) (bool, error)
}
type userService struct {
	repository repository.UserRepository
}

func NewUserService(repository repository.UserRepository) *userService {
	return &userService{repository}
}
func (s *userService) UserServiceCreate(input input.UserInput) (entity.User, error) {
	user := entity.User{}
	user.Name = input.Name
	user.Email = input.Email
	user.PasswordHash = input.PasswordHash
	user.AvatarFileName = input.AvatarFileName
	user.Role = input.Role
	newUser, err := s.repository.SaveUser(user)
	if err != nil {
		return newUser, err
	}
	return newUser, nil
}
func (s *userService) UserServiceUpdate(inputID input.InputIDUser, inputData input.UserInput) (entity.User, error) {
	user, err := s.repository.FindByIDUser(inputID.ID)
	if err != nil {
		return user, err
	}
	user.Name = inputData.Name
	user.Email = inputData.Email
	user.PasswordHash = inputData.PasswordHash
	user.AvatarFileName = inputData.AvatarFileName
	user.Role = inputData.Role

	updatedUser, err := s.repository.UpdateUser(user)

	if err != nil {
		return updatedUser, err
	}
	return updatedUser, nil
}
func (s *userService) UserServiceGetByID(inputID input.InputIDUser) (entity.User, error) {
	user, err := s.repository.FindByIDUser(inputID.ID)
	if err != nil {
		return user, err
	}
	return user, nil
}
func (s *userService) UserServiceGetAll() ([]entity.User, error) {
	users, err := s.repository.FindAllUser()
	if err != nil {
		return users, err
	}
	return users, nil
}
func (s *userService) UserServiceDeleteByID(inputID input.InputIDUser) (bool, error) {
	_, err := s.repository.FindByIDUser(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDUser(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 15 November 2021
